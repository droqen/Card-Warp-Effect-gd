[gd_resource type="Shader" format=3 uid="uid://b6ygq8415be0i"]

[resource]
resource_local_to_scene = true
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_disable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_disable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_disable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

float cardwarpat(vec2 pt) {
	return 0.3 * cos(pt.x*1.31) * sin(pt.y*1.11);
}

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	VERTEX.y += cardwarpat(VERTEX.xz);
	vec2 e = vec2(0.01, 0.0);
	vec3 normal = normalize(vec3(cardwarpat(VERTEX.xz - e) - cardwarpat(VERTEX.xz + e), 2.0 * e.x, cardwarpat(VERTEX.xz - e.yx) - cardwarpat(VERTEX.xz + e.yx)));
	NORMAL = normal;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"
